# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import pandas as pd
import difflib
import xlrd

def string_similar(s1,s2):
    return difflib.SequenceMatcher(None,s1,s2).quick_ratio()

class readFile:
    def __init__(self,filename):
        wb = xlrd.open_workbook(filename)
        sheets = wb.sheet_names()
        df=pd.DataFrame()
        for i in sheets:
            df=pd.concat([df,pd.read_excel(filename,sheet_name=i,dtype=object)], axis=0, ignore_index=True)
        self.content = df.drop_duplicates()

class writeFile:
    def __init__(self,dataFrame,filename):
        writer=pd.ExcelWriter(filename)
        dataFrame.to_excel(writer,'Sheet',index=False)
        writer.save()

class match:
    def __init__(self,org,target,fill,ins):
        global allData
        global currentData
        global allData_write
        global currentData_write
        self.tar=target
        self.len_target = len(target.index.values)
        self.len_org = len(org.index.values)
        allData = self.len_target * self.len_org
        for i in range(len(org.columns.values)):
            if org.columns.values[i]=="规格型号":
                self.index_type_org = i
            elif org.columns.values[i]=="存货名称":
                self.index_name_org = i
            elif org.columns.values[i]=="品牌":
                self.index_brand_org = i
            elif org.columns.values[i]==fill:
                self.index_fill_org = i
        for i in range(len(target.columns.values)):
            if target.columns.values[i] == "规格型号":
                self.index_type_tar = i
            elif target.columns.values[i] == "存货名称":
                self.index_name_tar = i
            elif target.columns.values[i] == "品牌":
                self.index_brand_tar = i
            elif target.columns.values[i]==fill:
                self.index_fill_tar = i
        self.List=[]
        for i in range(self.len_target):
            for j in range(self.len_org):
                currentData = i*self.len_org+j
                if str(target.iloc[i,self.index_type_tar]).replace('-','').replace('_','').replace(' ','').replace('——','').upper() == str(org.iloc[j,self.index_type_org]).replace('-','').replace('_','').replace(' ','').replace('——','').upper():
                    self.List.append(org.iloc[j].values)
                    print("找到相似数据：采购单：{}/库存单：{}".format(target.iloc[i, self.index_type_tar], org.iloc[j, self.index_type_org]))
            print("当前进度：{}/{}".format(currentData, allData))
            ins.progressBar.setProperty("value", currentData/allData*100)
            QtWidgets.QApplication.processEvents()
        ins.progressBar.setProperty("value", 0)
        ins.title.setText("数据对比完成，正在写入文件...")
        self.dataFrame = pd.DataFrame(data=self.List, columns=org.columns.values).drop_duplicates()
        self.len_result = len(self.dataFrame.index.values)
        allData_write = self.len_target * self.len_result
        for i in range(self.len_target):
            for j in range(self.len_result):
                currentData_write = i*self.len_result+j
                if str(target.iloc[i,self.index_name_tar]) == str(self.dataFrame.iloc[j,self.index_name_org]) and str(target.iloc[i,self.index_type_tar]) == str(self.dataFrame.iloc[j,self.index_type_org]) and str(target.iloc[i,self.index_brand_tar]) == str(self.dataFrame.iloc[j,self.index_brand_org]):
                    self.tar.iloc[i,self.index_fill_tar]=self.dataFrame.iloc[j,self.index_fill_org]
                    print("写入数据：规格型号：{}/{}：{}".format(target.iloc[i, self.index_type_tar], fill, self.dataFrame.iloc[j,self.index_fill_org]))
            print("当前进度：{}/{}".format(currentData_write, allData_write))
            ins.progressBar.setProperty("value", currentData_write / allData_write * 100)
            QtWidgets.QApplication.processEvents()
        self.result = writeFile(self.dataFrame,'stock.xlsx')
        self.target = writeFile(self.tar,'purchase.xlsx')

class fuzzyMatch:
    def __init__(self,org,target,fill,ratio,ins):
        global allData
        global currentData
        global allData_write
        global currentData_write
        self.tar=target
        self.len_target = len(target.index.values)
        self.len_org = len(org.index.values)
        allData = self.len_target * self.len_org
        for i in range(len(org.columns.values)):
            if org.columns.values[i]=="规格型号":
                self.index_type_org = i
            elif org.columns.values[i]=="存货名称":
                self.index_name_org = i
            elif org.columns.values[i]=="品牌":
                self.index_brand_org = i
            elif org.columns.values[i]==fill:
                self.index_fill_org = i
        for i in range(len(target.columns.values)):
            if target.columns.values[i] == "规格型号":
                self.index_type_tar = i
            elif target.columns.values[i] == "存货名称":
                self.index_name_tar = i
            elif target.columns.values[i] == "品牌":
                self.index_brand_tar = i
            elif target.columns.values[i]==fill:
                self.index_fill_tar = i
        self.List=[]
        for i in range(self.len_target):
            for j in range(self.len_org):
                currentData = i*self.len_org+j
                if string_similar(str(target.iloc[i, self.index_type_tar]).upper(),str(org.iloc[j, self.index_type_org]).upper()) >= ratio:
                    self.List.append(org.iloc[j].values)
                    print("找到相似数据：采购单：{}/库存单：{}".format(target.iloc[i, self.index_type_tar], org.iloc[j, self.index_type_org]))
            print("当前进度：{}/{}".format(currentData, allData))
            ins.progressBar.setProperty("value", currentData/allData*100)
            QtWidgets.QApplication.processEvents()
        ins.progressBar.setProperty("value", 0)
        ins.title.setText("数据对比完成，正在写入文件...")
        self.dataFrame = pd.DataFrame(data=self.List, columns=org.columns.values).drop_duplicates()
        self.len_result = len(self.dataFrame.index.values)
        allData_write = self.len_target * self.len_result
        for i in range(self.len_target):
            for j in range(self.len_result):
                currentData_write = i*self.len_result+j
                if str(target.iloc[i,self.index_name_tar]) == str(self.dataFrame.iloc[j,self.index_name_org]) and str(target.iloc[i,self.index_type_tar]) == str(self.dataFrame.iloc[j,self.index_type_org]) and str(target.iloc[i,self.index_brand_tar]) == str(self.dataFrame.iloc[j,self.index_brand_org]):
                    self.tar.iloc[i,self.index_fill_tar]=self.dataFrame.iloc[j,self.index_fill_org]
                    print("写入数据：规格型号：{}/{}：{}".format(target.iloc[i, self.index_type_tar], fill, self.dataFrame.iloc[j,self.index_fill_org]))
            print("当前进度：{}/{}".format(currentData_write, allData_write))
            ins.progressBar.setProperty("value", currentData_write / allData_write * 100)
            QtWidgets.QApplication.processEvents()
        self.result = writeFile(self.dataFrame,'stock.xlsx')
        self.target = writeFile(self.tar,'purchase.xlsx')

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 400)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.title = QtWidgets.QLabel(self.centralwidget)
        self.title.setGeometry(QtCore.QRect(220, 30, 371, 20))
        self.title.setAlignment(QtCore.Qt.AlignCenter)
        self.title.setObjectName("title")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(350, 310, 75, 23))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.click)
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setGeometry(QtCore.QRect(270, 360, 250, 20))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(270, 260, 250, 40))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.ratio_layout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.ratio_layout.setContentsMargins(0, 0, 0, 0)
        self.ratio_layout.setObjectName("ratio_layout")
        self.ratio = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.ratio.setObjectName("ratio")
        self.ratio_layout.addWidget(self.ratio)
        self.ratio_input = QtWidgets.QLineEdit(self.horizontalLayoutWidget)
        self.ratio_input.setObjectName("ratio_input")
        self.ratio_layout.addWidget(self.ratio_input)
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(270, 100, 250, 40))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.org_layout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.org_layout.setContentsMargins(0, 0, 0, 0)
        self.org_layout.setObjectName("org_layout")
        self.org = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        self.org.setObjectName("org")
        self.org_layout.addWidget(self.org)
        self.org_input = QtWidgets.QLineEdit(self.horizontalLayoutWidget_2)
        self.org_input.setObjectName("org_input")
        self.select_org = QtWidgets.QToolButton(self.centralwidget)
        self.select_org.setGeometry(QtCore.QRect(520, 110, 30, 20))
        self.select_org.setObjectName("select_org")
        self.select_org.clicked.connect(self.select_org_file)
        self.org_layout.addWidget(self.org_input)
        self.horizontalLayoutWidget_3 = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget_3.setGeometry(QtCore.QRect(270, 140, 250, 40))
        self.horizontalLayoutWidget_3.setObjectName("horizontalLayoutWidget_3")
        self.tar_layout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_3)
        self.tar_layout.setContentsMargins(0, 0, 0, 0)
        self.tar_layout.setObjectName("tar_layout")
        self.tar = QtWidgets.QLabel(self.horizontalLayoutWidget_3)
        self.tar.setObjectName("tar")
        self.tar_layout.addWidget(self.tar)
        self.tar_input = QtWidgets.QLineEdit(self.horizontalLayoutWidget_3)
        self.tar_input.setText("")
        self.tar_input.setObjectName("tar_input")
        self.select_tar = QtWidgets.QToolButton(self.centralwidget)
        self.select_tar.setGeometry(QtCore.QRect(520, 150, 30, 20))
        self.select_tar.setObjectName("select_tar")
        self.select_tar.clicked.connect(self.select_tar_file)
        self.tar_layout.addWidget(self.tar_input)
        self.horizontalLayoutWidget_4 = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget_4.setGeometry(QtCore.QRect(270, 180, 250, 40))
        self.horizontalLayoutWidget_4.setObjectName("horizontalLayoutWidget_4")
        self.key_layout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_4)
        self.key_layout.setContentsMargins(0, 0, 0, 0)
        self.key_layout.setObjectName("key_layout")
        self.label = QtWidgets.QLabel(self.horizontalLayoutWidget_4)
        self.label.setObjectName("label")
        self.key_layout.addWidget(self.label)
        self.key_input = QtWidgets.QLineEdit(self.horizontalLayoutWidget_4)
        self.key_input.setObjectName("key_input")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(521, 190, 100, 20))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.activated.connect(self.select_key)
        self.key_layout.addWidget(self.key_input)
        self.horizontalLayoutWidget_5 = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget_5.setGeometry(QtCore.QRect(270, 220, 250, 40))
        self.horizontalLayoutWidget_5.setObjectName("horizontalLayoutWidget_5")
        self.mode_layout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_5)
        self.mode_layout.setContentsMargins(0, 0, 0, 0)
        self.mode_layout.setObjectName("mode_layout")
        self.default_mode = QtWidgets.QCheckBox(self.horizontalLayoutWidget_5)
        self.default_mode.setObjectName("default_mode")
        self.default_mode.clicked.connect(self.click_default)
        self.mode_layout.addWidget(self.default_mode)
        self.custom_mode = QtWidgets.QCheckBox(self.horizontalLayoutWidget_5)
        self.custom_mode.setObjectName("custom_mode")
        self.custom_mode.clicked.connect(self.click_custom)
        self.mode_layout.addWidget(self.custom_mode)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 23))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.ratio.hide()
        self.ratio_input.hide()
        self.progressBar.hide()
        self.default_mode.setChecked(True)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "采购单补全修正程序"))
        self.title.setText(_translate("MainWindow", "欢迎使用！"))
        self.pushButton.setText(_translate("MainWindow", "导出结果"))
        self.ratio.setText(_translate("MainWindow", "精确度："))
        self.ratio_input.setPlaceholderText(_translate("MainWindow", "请输入0-1之间的任意数例如0.99"))
        self.org.setText(_translate("MainWindow", "库存单："))
        self.org_input.setPlaceholderText(_translate("MainWindow", "选择库存单或输入完整路径"))
        self.tar.setText(_translate("MainWindow", "采购单："))
        self.tar_input.setPlaceholderText(_translate("MainWindow", "选择采购单或输入完整路径"))
        self.label.setText(_translate("MainWindow", "填充项："))
        self.key_input.setPlaceholderText(_translate("MainWindow", "选择或输入需要填充的字段"))
        self.default_mode.setText(_translate("MainWindow", "默认模式"))
        self.custom_mode.setText(_translate("MainWindow", "自定义模式"))
        self.select_tar.setText(_translate("MainWindow", "..."))
        self.select_org.setText(_translate("MainWindow", "..."))

    def click(self):
        global org_dataFrame
        global tar_dataFrame
        if self.custom_mode.isChecked():
            try:
                self.pushButton.setDisabled(True)
                self.progressBar.show()
                self.title.setText("正在读取文件...")
                org_dataFrame = readFile(self.org_input.text().strip()).content
                tar_dataFrame = readFile(self.tar_input.text().strip()).content
                self.title.setText("文件读取成功，正在对比数据...")
                result = fuzzyMatch(org_dataFrame, tar_dataFrame, self.key_input.text().strip(),float(self.ratio_input.text()),self)
                self.title.setText("操作成功！结果已保存在当前文件夹(stock.xlsx,purchase.xlsx)")
                self.org_input.clear()
                self.tar_input.clear()
                self.key_input.clear()
                self.ratio_input.clear()
                self.comboBox.clear()
                self.pushButton.setEnabled(True)
                self.progressBar.hide()
            except:
                self.pushButton.setEnabled(True)
                self.progressBar.hide()
                self.title.setText("操作有误！请重新输入！")
                self.org_input.clear()
                self.tar_input.clear()
                self.key_input.clear()
        else:
            try:
                self.pushButton.setDisabled(True)
                self.progressBar.show()
                self.title.setText("正在读取文件...")
                org_dataFrame = readFile(self.org_input.text().strip()).content
                tar_dataFrame = readFile(self.tar_input.text().strip()).content
                self.title.setText("文件读取成功，正在对比数据...")
                result = match(org_dataFrame, tar_dataFrame, self.key_input.text().strip(), self)
                self.title.setText("操作成功！结果已保存在当前文件夹(stock.xlsx,purchase.xlsx)")
                self.org_input.clear()
                self.tar_input.clear()
                self.key_input.clear()
                self.ratio_input.clear()
                self.comboBox.clear()
                self.pushButton.setEnabled(True)
                self.progressBar.hide()
            except:
                self.pushButton.setEnabled(True)
                self.progressBar.hide()
                self.title.setText("操作有误！请重新输入！")
                self.org_input.clear()
                self.tar_input.clear()
                self.key_input.clear()

    def click_custom(self):
        if self.custom_mode.isChecked() and self.default_mode.isChecked():
            self.ratio.show()
            self.ratio_input.show()
            self.default_mode.setChecked(False)
        elif self.default_mode.isChecked() == False and self.custom_mode.isChecked():
            self.ratio.show()
            self.ratio_input.show()
        else:
            self.ratio.hide()
            self.ratio_input.hide()


    def click_default(self):
        if self.custom_mode.isChecked() == False and self.default_mode.isChecked() == False:
            self.ratio.hide()
            self.ratio_input.hide()
        elif self.default_mode.isChecked() and self.custom_mode.isChecked() == False:
            self.ratio.hide()
            self.ratio_input.hide()
        else:
            self.ratio.hide()
            self.ratio_input.hide()
            self.custom_mode.setChecked(False)

    def select_org_file(self):
        filename = QtWidgets.QFileDialog.getOpenFileName()[0]
        self.org_input.setText(filename)

    def select_tar_file(self):
        self.comboBox.clear()
        filename = QtWidgets.QFileDialog.getOpenFileName()[0]
        if filename != '':
            self.tar_input.setText(filename)
            dataFrame = readFile(filename).content
            self.comboBox.addItems(dataFrame.columns.values)

    def select_key(self):
        self.key_input.setText(self.comboBox.currentText())


def showMainWindow():
    print("******************************************************请勿关闭后台！****************************************************")
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

if __name__ == '__main__':
    showMainWindow()
